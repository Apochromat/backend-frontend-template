Index: frontend/src/components/uikit/modal/useModal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/uikit/modal/useModal.tsx b/frontend/src/components/uikit/modal/useModal.tsx
--- a/frontend/src/components/uikit/modal/useModal.tsx	(revision 8264b0abc02473a16e2b1c0f3780e9c7a1f0c04a)
+++ b/frontend/src/components/uikit/modal/useModal.tsx	(revision 4e5a9259712dba8e46ef2f62dcbdf36a9e52efe4)
@@ -65,10 +65,10 @@
 };
 
 export const ModalProvider: React.FC<React.PropsWithChildren> = (props) => {
-  const [modals, setModals] = useState<UseModalOptions[]>([]);
+  const [modals, setModals] = useState<UseModalOptions<any>[]>([]);
   const i18n = useScopedTranslation('uikit.dialog');
   const addModal = useCallback(
-    (modal: UseModalOptions, promise: Promise<unknown>) => {
+    (modal: UseModalOptions<any>, promise: Promise<unknown>) => {
       setModals((o) => [...o, modal]);
       promise.finally(() => {
         // we use setTimeout to allow hiding form animations to finish
@@ -207,8 +207,11 @@
     options.type === 'prompt' ? options.defaultValue : '',
   );
 
-  const onClose = useCallback(() => {
+  const commonClose = useCallback(() => {
     setIsShown(false);
+  }, []);
+  const onClose = useCallback(() => {
+    commonClose();
     if (!options) return;
 
     const type = options.type;
@@ -232,7 +235,7 @@
       default:
         assertNever(type);
     }
-  }, [options]);
+  }, [commonClose, options]);
 
   return (
     <CustomModal
@@ -272,7 +275,7 @@
                   title={x.text}
                   onClick={() => {
                     options.resolve(x.id);
-                    onClose();
+                    commonClose();
                   }}
                 />
               ))
@@ -288,7 +291,11 @@
                         : ButtonColor.Secondary)
                     }
                     title={options.cancelButtonText ?? i18n.t('cancel_button')}
-                    onClick={onClose}
+                    onClick={() => {
+                      if (options.type === 'confirm') options.resolve(false);
+                      else options.resolve(null);
+                      commonClose();
+                    }}
                     data-test-id="dialog-cancelButton"
                   />
                 ) : null}
Index: frontend/src/components/uikit/modal/useModal.types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/uikit/modal/useModal.types.ts b/frontend/src/components/uikit/modal/useModal.types.ts
--- a/frontend/src/components/uikit/modal/useModal.types.ts	(revision 8264b0abc02473a16e2b1c0f3780e9c7a1f0c04a)
+++ b/frontend/src/components/uikit/modal/useModal.types.ts	(revision 4e5a9259712dba8e46ef2f62dcbdf36a9e52efe4)
@@ -1,7 +1,7 @@
 import React from 'react';
 import { ButtonColor } from '../buttons/Button';
 
-export type UseModalOptions = {
+export type UseModalOptions<T = string> = {
   id: string;
   title: string;
   text: React.ReactNode;
@@ -20,9 +20,9 @@
       type: 'prompt';
       resolve: (result: string | null) => void;
     })
-  | (MultiButtonOptions & {
+  | (MultiButtonOptions<T> & {
       type: 'multibutton';
-      resolve: (result: string | null) => void;
+      resolve: (result: T | null) => void;
     })
 );
 export type ErrorOptions = {
@@ -57,20 +57,31 @@
   cancelButtonText?: string;
   cancelButtonColor?: ButtonColor;
 };
-export type MultiButtonOptions = {
+export type MultiButtonOptions<T = string> = {
   title: string;
   text: React.ReactNode;
-  buttons: { id: string; text: string; color?: ButtonColor }[];
+  buttons: { id: T; text: string; color?: ButtonColor }[];
 };
 export type ModalContextType = {
   hide: (id: string) => void;
   showError: (options: ErrorOptions) => Promise<void> & { id: string };
+
+  /*
+   * Shows confirmation message with a single Ok button.
+   * Returns a Promise which is resolved when Ok is pressed or Modal is closed.
+   */
   showAlert: (options: AlertOptions) => Promise<void> & { id: string };
+
+  /*
+   * Shows confirmation message with 2 buttons: Cancel and Ok.
+   * Returns `true` if Ok was pressed; `false` if Cancel was pressed (or if Modal was closed).
+   * If you want to differentiate between Cancel and Close, please use `showMultiButton`.
+   */
   showConfirm: (options: ConfirmOptions) => Promise<boolean> & { id: string };
   showPrompt: (
     options: PromptOptions,
   ) => Promise<string | null> & { id: string };
-  showMultiButton: (
-    options: MultiButtonOptions,
-  ) => Promise<string | null> & { id: string };
+  showMultiButton: <T = string>(
+    options: MultiButtonOptions<T>,
+  ) => Promise<T | null> & { id: string };
 };
