Index: frontend/src/components/uikit/modal/useModal.types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/uikit/modal/useModal.types.ts b/frontend/src/components/uikit/modal/useModal.types.ts
--- a/frontend/src/components/uikit/modal/useModal.types.ts	(revision d1e85b109041147e42ef1edd0294088790d37162)
+++ b/frontend/src/components/uikit/modal/useModal.types.ts	(revision 7567fe22332b01e7b67514ccd162e5eb8d757a98)
@@ -52,6 +52,7 @@
   defaultValue: string;
   fieldName: string;
   fieldError?: string;
+  maxLength?: number;
   okButtonText?: string;
   okButtonColor?: ButtonColor;
   cancelButtonText?: string;
Index: frontend/src/components/uikit/modal/useModal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/components/uikit/modal/useModal.tsx b/frontend/src/components/uikit/modal/useModal.tsx
--- a/frontend/src/components/uikit/modal/useModal.tsx	(revision d1e85b109041147e42ef1edd0294088790d37162)
+++ b/frontend/src/components/uikit/modal/useModal.tsx	(revision 7567fe22332b01e7b67514ccd162e5eb8d757a98)
@@ -237,6 +237,17 @@
     }
   }, [commonClose, options]);
 
+  const inputRef = useRef<HTMLInputElement>(null);
+  useEffect(
+    function focusInputWhenShown() {
+      if (!isShown) return;
+      inputRef.current?.focus();
+      setTimeout(() => inputRef.current?.focus(), 100);
+      setTimeout(() => inputRef.current?.focus(), 1000);
+    },
+    [isShown],
+  );
+
   return (
     <CustomModal
       isOpen={isShown}
@@ -253,8 +264,10 @@
                 <Input
                   value={fieldValue}
                   autoFocus={true}
+                  ref={inputRef}
                   onChange={(e) => setFieldValue(e.target.value)}
                   errorText={options.fieldError}
+                  maxLength={options.maxLength}
                   onKeyDown={(event) => {
                     if (event.key === 'Enter') {
                       commonClose();
